arch=`uname -m`
if [ "$arch" = "armv7l" ]; then
	# 00 - runtime
	# 01 - safemode (hardcoded in U-Boot env)
	# 02 - restore
	# 03 - auto-restore
	BOOT_CONFIG_LOCATION=/sys/bus/i2c/devices/0-0040/scratch_hardreset
	write_config() {
		case "$1" in
		default)
			echo -n 00 > $BOOT_CONFIG_LOCATION
			;;
		restore)
			echo -n 02 > $BOOT_CONFIG_LOCATION
			;;
		auto-restore)
			echo -n 03 > $BOOT_CONFIG_LOCATION
			;;
		esac
	}
	read_config() {
		read tmp_cfg < $BOOT_CONFIG_LOCATION
		case $tmp_cfg in
		00)
			echo default
			;;
		02)
			echo restore
			;;
		03)
			echo auto-restore
			;;
		esac
		echo $tmp_cfg
	}
elif [ "$arch" = "x86_64" ]; then
	BOOT_CONFIG_LOCATION=/boot/bootmode
	write_config() {
		echo set BOOT_MODE=$1 > $BOOT_CONFIG_LOCATION
	}
	read_config() {
		read tmp_cfg < $BOOT_CONFIG_LOCATION
		echo $tmp_cfg | awk -F '=' '{print $2}';
	}

	# if the bootmode file doesn't exist, this is the first run of this
	# script for this boot, so set it to the default mode (default)
	if [ ! -f "$BOOT_CONFIG_LOCATION" ]; then
		write_config default
	fi
fi

BOOT_MODE_INPUT=/tmp/ni_boot_mode_input

fail() { echo "$@" >&2; exit 1; }

check_file() {
    [ -f "$1" ] || fail "$0 error: Unable to find $1";
}

setbootmode() {
    case "$1" in
    default)
        write_config default
        ;;
    restore)
        write_config restore
        ;;
    auto-restore)
        write_config auto-restore
        ;;
    esac
}

checkbootmode() {
    if [ ! -f $BOOT_MODE_INPUT ];then
        NEXT_BOOT_MODE=default
    else
        read NEXT_BOOT_MODE < $BOOT_MODE_INPUT
    fi
    if [ -n "$NEXT_BOOT_MODE" ]; then
        case "$NEXT_BOOT_MODE" in
        default|restore|auto-restore)
            CUR_BOOT_CONFIG=$(read_config)
            if [ "$NEXT_BOOT_MODE" != "$CUR_BOOT_CONFIG" ]; then
                echo Configuring next boot mode to $NEXT_BOOT_MODE.
                setbootmode $NEXT_BOOT_MODE
            else
                # The current boot mode and the requested boot mode are
                # the same. Ignoring the request.  However, this is not
                # a warning or a fatal error just an optimization.
                echo "Next boot mode is $NEXT_BOOT_MODE"
            fi
            ;;
        *)
            fail "Fatal error: The file $BOOT_MODE_INPUT contains invalid boot mode"
            ;;
        esac
    fi
}
