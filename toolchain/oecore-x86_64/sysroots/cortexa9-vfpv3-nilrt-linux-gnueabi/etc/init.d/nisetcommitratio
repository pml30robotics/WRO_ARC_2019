#!/bin/sh

# Suppose that your driver kmallocs lots of memory. overcommit_ratio needs to be
# adjusted to avoid OOMs under overcommit_memory=2. Doing so is the purpose of
# this initscript.
#
# Instructions: your driver package should install a file under
# /etc/memreserve.d/. Each line should contain either a number representing
# estimated kernelspace memory allocations in megabytes, or a comment (starting
# with #). Syntax errors are silently ignored.
#
# This script will adjust overcommit_ratio based on your reservation and
# everybody else's. If this facility is unused (no reservations under
# /etc/memreserve.d or they sum to 0), then overcommit ratio is left unchanged;
# typically a default value for overcommit_ratio can be set in /etc/sysctl.conf
# in that event.

: ${MEMRESERVE_DIR:=/etc/memreserve.d}
: ${OVERCOMMIT_RATIO:=/proc/sys/vm/overcommit_ratio}

get_total_reserve_kb () {
	# Don't execute the `cat | awk` unless at least one file exists
	for f in "$MEMRESERVE_DIR"/*; do
		[ -f "$f" ] || break
		# Grep for all lines containing only a single natural number,
		# sum them together, and convert to KB
		cat "$MEMRESERVE_DIR"/* | awk \
			'/^[[:space:]]*[[:digit:]]+[[:space:]]*$/ {s+=$1} END {print s*1024}'
		return 0
	done
	echo 0
}

get_memtotal_kb () {
	awk 'BEGIN {s=0} /MemTotal/{s=$2} END {print s}' /proc/meminfo
}

# Echoes the computed overcommit ratio percentage based on the total amount of
# memory and the memory reservations specified under $MEMRESERVE_DIR. If an
# error occurs, such that the overcommit ratio should not be set, 0 will be
# echoed.
overcommit_ratio () {
	# Allow MemTotal to be overridden via $MEMTOTAL_KB to allow control by
	# unit tests
	memtotal=${MEMTOTAL_KB:-`get_memtotal_kb`}
	reserved=`get_total_reserve_kb`
	if [ $memtotal -le 0 ]; then
		ratio=0
		cat <<EOF >&2
$0: WARNING: Unable to get MemTotal (got $memtotal); overcommit ratio is unchanged
EOF
	elif [ $memtotal -le $reserved ]; then
		# Don't just not set overcommit_ratio; that could mask real
		# problems. Instead, choose a ratio that is ridiculously low,
		# and will cause problems, but should still allow the system to
		# finish booting and start running stuff
		ratio=25
		cat <<EOF >&2
$0: WARNING: Reserved memory ($reserved) exceeds MemTotal ($memtotal); \
defaulting to overcommit_ratio=$ratio
EOF
	elif [ $reserved -eq 0 ]; then
		ratio=0		# will be interpreted as "don't set"
	else
		ratio=$(( (memtotal-reserved)*100/memtotal ))
	fi
	echo $ratio
}

case "$1" in
start)
	ratio=`overcommit_ratio`
	if [ "x$ratio" != "x" -a $ratio -gt 0 ]; then
		[ "$VERBOSE" != "no" ] && echo "Overcommit ratio: $ratio"
		echo $ratio > "$OVERCOMMIT_RATIO"
	fi ;;
stop)	exit 0 ;;
*)
	echo "Usage: $0 start" >&2
	exit 3
	;;
esac
